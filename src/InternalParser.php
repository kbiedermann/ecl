<?php
/*
 * Generated by PEG.js 0.8.0. with php-pegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace ECL;

/* Usefull functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists('ECL\\chr_unicode')) { function chr_unicode($code) { return mb_convert_encoding('&#' . $code . ';', 'UTF-8', 'HTML-ENTITIES');} }
/* peg_regex_test - multibyte regex test */
if (!function_exists('ECL\\peg_regex_test')) { function peg_regex_test($pattern, $string) { if (substr($pattern, -1) == 'i') return mb_eregi(substr($pattern, 1, -2), $string); else return mb_ereg(substr($pattern, 1, -1), $string);}}

/* Syntax error exception */
if (!class_exists("ECL\\SyntaxError", false)){
class SyntaxError extends \Exception
{
    public $expected;
    public $found;
    public $grammarOffset;
    public $grammarLine;
    public $grammarColumn;
    public $name;
    public function __construct($message, $expected, $found, $offset, $line, $column)
    {
        parent::__construct($message, 0, null);
        $this->expected = $expected;
        $this->found = $found;
        $this->grammarOffset = $offset;
        $this->grammarLine = $line;
        $this->grammarColumn = $column;
        $this->name = "SyntaxError";
    }
};}

class InternalParser{


    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = "";


    private function cleanup_state(){
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = "";

    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_computePosDetails($pos) {
      $self = $this;
      $advance = function(&$details, $startPos, $endPos) use($self) {
        for ($p = $startPos; $p < $endPos; $p++) {
          $ch = mb_substr($self->input, $p, 1, "UTF-8");
          if ($ch === "\n") {
            if (!$details["seenCR"]) { $details["line"]++; }
            $details["column"] = 1;
            $details["seenCR"] = false;
          } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
            $details["line"]++;
            $details["column"] = 1;
            $details["seenCR"] = true;
          } else {
            $details["column"]++;
            $details["seenCR"] = false;
          }
        }
      };

      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $advance($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException($message, $expected, $pos) {
      $cleanupExpected = function (&$expected){
        $i = 1;

        usort($expected, function($a, $b) {
          if ($a["description"] < $b["description"]) {
            return -1;
          } else if ($a["description"] > $b["description"]) {
            return 1;
          } else {
            return 0;
          }
        });

        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      };

      $buildMessage = function ($expected, $found) {
        $stringEscape = function ($s) {
          $hex = function($ch) { return strtoupper(dechex(ord($ch[0])));};

            $s = str_replace("\\",   "\\\\", $s);
            $s = str_replace("\"",    "\\\"", $s);
            $s = str_replace('\x08', '\\b', $s);
            $s = str_replace('\t',   '\\t', $s);
            $s = str_replace('\n',   '\\n', $s);
            $s = str_replace('\f',   '\\f', $s);
            $s = str_replace('\r',   '\\r', $s);
            $s = preg_replace_callback('/[\\x00-\\x07\\x0B\\x0E\\x0F]/u', function($ch) use($hex) { return '\\x0' + $hex($ch[0]); }, $s);
            $s = preg_replace_callback('/[\\x10-\\x1F\\x80-\\xFF]/u',     function($ch) use($hex) { return '\\x'  + $hex($ch[0]); }, $s);
            return $s;
        };

        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? "\"" . $stringEscape($found) . "\"" : "end of input";

        return "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      };

      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < mb_strlen($this->input, "UTF-8") ? mb_substr($this->input, $pos, 1, "UTF-8") : null;

      if ($expected !== null) {
        $cleanupExpected($expected);
      }

      return new SyntaxError(
        $message !== null ? $message : $buildMessage($expected, $found),
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;
    private $peg_c67;
    private $peg_c68;
    private $peg_c69;
    private $peg_c70;
    private $peg_c71;
    private $peg_c72;
    private $peg_c73;
    private $peg_c74;
    private $peg_c75;
    private $peg_c76;
    private $peg_c77;
    private $peg_c78;
    private $peg_c79;
    private $peg_c80;
    private $peg_c81;
    private $peg_c82;
    private $peg_c83;
    private $peg_c84;
    private $peg_c85;
    private $peg_c86;
    private $peg_c87;
    private $peg_c88;
    private $peg_c89;
    private $peg_c90;
    private $peg_c91;
    private $peg_c92;
    private $peg_c93;
    private $peg_c94;
    private $peg_c95;
    private $peg_c96;
    private $peg_c97;
    private $peg_c98;
    private $peg_c99;
    private $peg_c100;
    private $peg_c101;
    private $peg_c102;
    private $peg_c103;
    private $peg_c104;
    private $peg_c105;
    private $peg_c106;
    private $peg_c107;
    private $peg_c108;
    private $peg_c109;
    private $peg_c110;
    private $peg_c111;
    private $peg_c112;
    private $peg_c113;
    private $peg_c114;
    private $peg_c115;
    private $peg_c116;
    private $peg_c117;
    private $peg_c118;
    private $peg_c119;
    private $peg_c120;
    private $peg_c121;
    private $peg_c122;
    private $peg_c123;
    private $peg_c124;
    private $peg_c125;
    private $peg_c126;
    private $peg_c127;
    private $peg_c128;
    private $peg_c129;
    private $peg_c130;
    private $peg_c131;
    private $peg_c132;
    private $peg_c133;
    private $peg_c134;
    private $peg_c135;
    private $peg_c136;
    private $peg_c137;
    private $peg_c138;
    private $peg_c139;
    private $peg_c140;
    private $peg_c141;
    private $peg_c142;
    private $peg_c143;
    private $peg_c144;
    private $peg_c145;
    private $peg_c146;
    private $peg_c147;
    private $peg_c148;
    private $peg_c149;
    private $peg_c150;
    private $peg_c151;
    private $peg_c152;
    private $peg_c153;
    private $peg_c154;
    private $peg_c155;
    private $peg_c156;
    private $peg_c157;
    private $peg_c158;
    private $peg_c159;
    private $peg_c160;
    private $peg_c161;
    private $peg_c162;
    private $peg_c163;
    private $peg_c164;
    private $peg_c165;
    private $peg_c166;
    private $peg_c167;
    private $peg_c168;
    private $peg_c169;
    private $peg_c170;
    private $peg_c171;
    private $peg_c172;
    private $peg_c173;
    private $peg_c174;
    private $peg_c175;
    private $peg_c176;
    private $peg_c177;
    private $peg_c178;
    private $peg_c179;
    private $peg_c180;
    private $peg_c181;
    private $peg_c182;
    private $peg_c183;
    private $peg_c184;
    private $peg_c185;
    private $peg_c186;
    private $peg_c187;
    private $peg_c188;
    private $peg_c189;
    private $peg_c190;
    private $peg_c191;
    private $peg_c192;
    private $peg_c193;
    private $peg_c194;
    private $peg_c195;
    private $peg_c196;
    private $peg_c197;
    private $peg_c198;
    private $peg_c199;
    private $peg_c200;
    private $peg_c201;
    private $peg_c202;
    private $peg_c203;
    private $peg_c204;
    private $peg_c205;
    private $peg_c206;
    private $peg_c207;
    private $peg_c208;
    private $peg_c209;
    private $peg_c210;
    private $peg_c211;
    private $peg_c212;
    private $peg_c213;
    private $peg_c214;
    private $peg_c215;
    private $peg_c216;
    private $peg_c217;
    private $peg_c218;
    private $peg_c219;
    private $peg_c220;
    private $peg_c221;
    private $peg_c222;
    private $peg_c223;
    private $peg_c224;
    private $peg_c225;
    private $peg_c226;
    private $peg_c227;
    private $peg_c228;
    private $peg_c229;
    private $peg_c230;
    private $peg_c231;
    private $peg_c232;
    private $peg_c233;
    private $peg_c234;
    private $peg_c235;
    private $peg_c236;
    private $peg_c237;
    private $peg_c238;
    private $peg_c239;
    private $peg_c240;
    private $peg_c241;
    private $peg_c242;
    private $peg_c243;
    private $peg_c244;
    private $peg_c245;
    private $peg_c246;
    private $peg_c247;
    private $peg_c248;
    private $peg_c249;
    private $peg_c250;
    private $peg_c251;
    private $peg_c252;
    private $peg_c253;
    private $peg_c254;
    private $peg_c255;
    private $peg_c256;
    private $peg_c257;
    private $peg_c258;
    private $peg_c259;
    private $peg_c260;
    private $peg_c261;
    private $peg_c262;
    private $peg_c263;
    private $peg_c264;
    private $peg_c265;
    private $peg_c266;
    private $peg_c267;
    private $peg_c268;
    private $peg_c269;
    private $peg_c270;
    private $peg_c271;
    private $peg_c272;
    private $peg_c273;
    private $peg_c274;
    private $peg_c275;
    private $peg_c276;
    private $peg_c277;
    private $peg_c278;
    private $peg_c279;
    private $peg_c280;
    private $peg_c281;
    private $peg_c282;
    private $peg_c283;
    private $peg_c284;
    private $peg_c285;
    private $peg_c286;
    private $peg_c287;
    private $peg_c288;
    private $peg_c289;

    private function peg_parseRoot() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseStatement();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c2;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 === $this->peg_FAILED) {
            $s5 = $this->peg_c1;
          }
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c3) {
              $s6 = $this->peg_c3;
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c4); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parse_();
              if ($s7 === $this->peg_FAILED) {
                $s7 = $this->peg_c1;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_parseStatement();
                if ($s8 !== $this->peg_FAILED) {
                  $s5 = array($s5, $s6, $s7, $s8);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 === $this->peg_FAILED) {
              $s5 = $this->peg_c1;
            }
            if ($s5 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c3) {
                $s6 = $this->peg_c3;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c4); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parse_();
                if ($s7 === $this->peg_FAILED) {
                  $s7 = $this->peg_c1;
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parseStatement();
                  if ($s8 !== $this->peg_FAILED) {
                    $s5 = array($s5, $s6, $s7, $s8);
                    $s4 = $s5;
                  } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c3) {
                $s5 = $this->peg_c3;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c4); }
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 === $this->peg_FAILED) {
                  $s6 = $this->peg_c1;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c5,$s2, $s3);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseStatement() {

      $s0 = $this->peg_parseCommandList();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSet();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseCond();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseLoop();
          }
        }
      }

      return $s0;
    }

    private function peg_parseSEP() {

      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c6) {
        $s0 = $this->peg_c6;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c7); }
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseWhitespace();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseComment();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseWhitespace();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c1;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseWhitespace();
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c8); }
      }

      return $s0;
    }

    private function peg_parseComment() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c9) {
        $s1 = $this->peg_c9;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c10); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        if (peg_regex_test($this->peg_c11, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c12); }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c11, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c12); }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseWhitespace() {

      $s0 = $this->peg_c2;
      $s1 = $this->peg_parseWhitespaceChar();
      if ($s1 !== $this->peg_FAILED) {
        while ($s1 !== $this->peg_FAILED) {
          $s0[] = $s1;
          $s1 = $this->peg_parseWhitespaceChar();
        }
      } else {
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseWhitespaceChar() {

      if (peg_regex_test($this->peg_c13, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c14); }
      }

      return $s0;
    }

    private function peg_parseBacktickQuoted() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c15) {
        $s1 = $this->peg_c15;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c16); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_c2;
        $s4 = $this->peg_parseBacktickQuotedChar();
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          $s4 = $this->peg_parseBacktickQuotedChar();
        }
        if ($s3 !== $this->peg_FAILED) {
          $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
        }
        $s2 = $s3;
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c15) {
            $s3 = $this->peg_c15;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c16); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c17,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseBacktickQuotedChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c18) {
        $s1 = $this->peg_c18;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c19); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c20);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (peg_regex_test($this->peg_c21, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s1 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c22); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c23,$s1);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseWildCardValue() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      $s2 = $this->peg_parseWildCardChunk();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseWildCardChunk();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c24,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseWildCardChunk() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c25) {
        $s1 = $this->peg_c25;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c26); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c27);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c28) {
          $s1 = $this->peg_c28;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c29); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c30);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseDoubleQuoted();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseSingleQuoted();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseEscaped();
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseDoubleQuoted() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
        $s1 = $this->peg_c31;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_c2;
        $s4 = $this->peg_parseDoubleQuotedChar();
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          $s4 = $this->peg_parseDoubleQuotedChar();
        }
        if ($s3 !== $this->peg_FAILED) {
          $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
        }
        $s2 = $s3;
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c31) {
            $s3 = $this->peg_c31;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c32); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c17,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSingleQuoted() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c33) {
        $s1 = $this->peg_c33;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c34); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_c2;
        $s4 = $this->peg_parseSingleQuotedChar();
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          $s4 = $this->peg_parseSingleQuotedChar();
        }
        if ($s3 !== $this->peg_FAILED) {
          $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
        }
        $s2 = $s3;
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c33) {
            $s3 = $this->peg_c33;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c34); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c17,$s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseEscaped() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      $s2 = $this->peg_parseEscapedChar();
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_parseEscapedChar();
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseDoubleQuotedChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c35) {
        $s1 = $this->peg_c35;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c37);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSpecialChar();
        if ($s0 === $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c38, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c39); }
          }
        }
      }

      return $s0;
    }

    private function peg_parseSingleQuotedChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c40) {
        $s1 = $this->peg_c40;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c41); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c42);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSpecialChar();
        if ($s0 === $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c43, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c44); }
          }
        }
      }

      return $s0;
    }

    private function peg_parseEscapedChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c45) {
        $s1 = $this->peg_c45;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c46); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c47);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c35) {
          $s1 = $this->peg_c35;
          $this->peg_currPos += 2;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c36); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c37);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c40) {
            $s1 = $this->peg_c40;
            $this->peg_currPos += 2;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c41); }
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c42);
          }
          $s0 = $s1;
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c48) {
              $s1 = $this->peg_c48;
              $this->peg_currPos += 2;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c49); }
            }
            if ($s1 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c50);
            }
            $s0 = $s1;
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c51) {
                $s1 = $this->peg_c51;
                $this->peg_currPos += 2;
              } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c52); }
              }
              if ($s1 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c53);
              }
              $s0 = $s1;
              if ($s0 === $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c54, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
                  $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
                  $this->peg_currPos++;
                } else {
                  $s0 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c55); }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseSpecialChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c56) {
        $s1 = $this->peg_c56;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c57); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c58);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c59) {
          $s1 = $this->peg_c59;
          $this->peg_currPos += 2;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c60); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c61);
        }
        $s0 = $s1;
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c62) {
            $s1 = $this->peg_c62;
            $this->peg_currPos += 2;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c63); }
          }
          if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c64);
          }
          $s0 = $s1;
        }
      }

      return $s0;
    }

    private function peg_parseRegexVal() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      $s2 = $this->peg_parseRegexChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseRegexChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseRegexChar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c65) {
        $s1 = $this->peg_c65;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c66); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c67);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c68, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s0 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c69); }
        }
      }

      return $s0;
    }

    private function peg_parseValue() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      if (peg_regex_test($this->peg_c70, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c71); }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c70, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c71); }
          }
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseVar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c72) {
        $s1 = $this->peg_c72;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c73); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_c2;
        if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
        }
        if ($s4 !== $this->peg_FAILED) {
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
            }
          }
        } else {
          $s3 = $this->peg_c0;
        }
        if ($s3 !== $this->peg_FAILED) {
          $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
        }
        $s2 = $s3;
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c76,$s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsePathVar() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c72) {
        $s1 = $this->peg_c72;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c73); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_c2;
        if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
        }
        if ($s4 !== $this->peg_FAILED) {
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
            }
          }
        } else {
          $s3 = $this->peg_c0;
        }
        if ($s3 !== $this->peg_FAILED) {
          $s3 = mb_substr($this->input, $s2, $this->peg_currPos - $s2, "UTF-8");
        }
        $s2 = $s3;
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parsePathList();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c77,$s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsePathList() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      $s2 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
        $s3 = $this->peg_c78;
        $this->peg_currPos++;
      } else {
        $s3 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $s5 = $this->peg_c2;
        if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
          $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
          $this->peg_currPos++;
        } else {
          $s6 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
        }
        if ($s6 !== $this->peg_FAILED) {
          while ($s6 !== $this->peg_FAILED) {
            $s5[] = $s6;
            if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
            }
          }
        } else {
          $s5 = $this->peg_c0;
        }
        if ($s5 !== $this->peg_FAILED) {
          $s5 = mb_substr($this->input, $s4, $this->peg_currPos - $s4, "UTF-8");
        }
        $s4 = $s5;
        if ($s4 !== $this->peg_FAILED) {
          $s3 = array($s3, $s4);
          $s2 = $s3;
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_c0;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
            $s3 = $this->peg_c78;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_c2;
            if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
            }
            if ($s6 !== $this->peg_FAILED) {
              while ($s6 !== $this->peg_FAILED) {
                $s5[] = $s6;
                if (peg_regex_test($this->peg_c74, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
                  $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c75); }
                }
              }
            } else {
              $s5 = $this->peg_c0;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s5 = mb_substr($this->input, $s4, $this->peg_currPos - $s4, "UTF-8");
            }
            $s4 = $s5;
            if ($s4 !== $this->peg_FAILED) {
              $s3 = array($s3, $s4);
              $s2 = $s3;
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c80,$s1);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
          $s1 = $this->peg_c78;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c81);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseIntVar() {

      $s0 = $this->peg_parseVar();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseInteger();
      }

      return $s0;
    }

    private function peg_parseExprVar() {

      $s0 = $this->peg_parseVar();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseBacktickQuoted();
      }

      return $s0;
    }

    private function peg_parseValVar() {

      $s0 = $this->peg_parseVar();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseValue();
      }

      return $s0;
    }

    private function peg_parseKeyVar() {

      $s0 = $this->peg_parseVar();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseKey();
      }

      return $s0;
    }

    private function peg_parsePrimVar() {

      $s0 = $this->peg_parsePrimitive();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseKey();
      }

      return $s0;
    }

    private function peg_parseWCValVar() {

      $s0 = $this->peg_parseVar();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseWildCardValue();
      }

      return $s0;
    }

    private function peg_parseKey() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_c2;
      if (peg_regex_test($this->peg_c82, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c83); }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c82, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s2 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c83); }
          }
        }
      } else {
        $s1 = $this->peg_c0;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s1 = mb_substr($this->input, $s0, $this->peg_currPos - $s0, "UTF-8");
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseBoolean() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c84) {
        $s1 = $this->peg_c84;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c85); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c86);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c87) {
          $s1 = $this->peg_c87;
          $this->peg_currPos += 5;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c88); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c89);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseNumber() {

      $s0 = $this->peg_parseFloat();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseInteger();
      }

      return $s0;
    }

    private function peg_parseFloat() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_c2;
      if (peg_regex_test($this->peg_c90, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s4 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c91); }
      }
      if ($s4 !== $this->peg_FAILED) {
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          if (peg_regex_test($this->peg_c90, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s4 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c91); }
          }
        }
      } else {
        $s3 = $this->peg_c0;
      }
      if ($s3 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c78) {
          $s4 = $this->peg_c78;
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c79); }
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_c2;
          if (peg_regex_test($this->peg_c90, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c91); }
          }
          while ($s6 !== $this->peg_FAILED) {
            $s5[] = $s6;
            if (peg_regex_test($this->peg_c90, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
              $s6 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c91); }
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4, $s5);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_c0;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s2 = mb_substr($this->input, $s1, $this->peg_currPos - $s1, "UTF-8");
      }
      $s1 = $s2;
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c92,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseInteger() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_c2;
      if (peg_regex_test($this->peg_c90, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
        $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
        $this->peg_currPos++;
      } else {
        $s3 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c91); }
      }
      if ($s3 !== $this->peg_FAILED) {
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c90, mb_substr($this->input, $this->peg_currPos, 1, "UTF-8"))) {
            $s3 = mb_substr($this->input, $this->peg_currPos, 1, "UTF-8");
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c91); }
          }
        }
      } else {
        $s2 = $this->peg_c0;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s2 = mb_substr($this->input, $s1, $this->peg_currPos - $s1, "UTF-8");
      }
      $s1 = $s2;
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c93,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parsePrimitive() {

      $s0 = $this->peg_parseBoolean();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseNumber();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseValue();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseDoubleQuoted();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseSingleQuoted();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseArr();
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseArr() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c94) {
        $s1 = $this->peg_c94;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c95); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parsePrimitive();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_c2;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 === $this->peg_FAILED) {
            $s5 = $this->peg_c1;
          }
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c96) {
              $s6 = $this->peg_c96;
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c97); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parse_();
              if ($s7 === $this->peg_FAILED) {
                $s7 = $this->peg_c1;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_parsePrimitive();
                if ($s8 !== $this->peg_FAILED) {
                  $s5 = array($s5, $s6, $s7, $s8);
                  $s4 = $s5;
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 === $this->peg_FAILED) {
              $s5 = $this->peg_c1;
            }
            if ($s5 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c96) {
                $s6 = $this->peg_c96;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c97); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parse_();
                if ($s7 === $this->peg_FAILED) {
                  $s7 = $this->peg_c1;
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parsePrimitive();
                  if ($s8 !== $this->peg_FAILED) {
                    $s5 = array($s5, $s6, $s7, $s8);
                    $s4 = $s5;
                  } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s4;
                  $s4 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c96) {
                $s5 = $this->peg_c96;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c97); }
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 === $this->peg_FAILED) {
                  $s6 = $this->peg_c1;
                }
                if ($s6 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c98) {
                    $s7 = $this->peg_c98;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c99); }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c5,$s2, $s3);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseCommandList() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseCommandPair();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 === $this->peg_FAILED) {
          $s4 = $this->peg_c1;
        }
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
            $s5 = $this->peg_c100;
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 === $this->peg_FAILED) {
              $s6 = $this->peg_c1;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseCommandPair();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 === $this->peg_FAILED) {
            $s4 = $this->peg_c1;
          }
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
              $s5 = $this->peg_c100;
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseCommandPair();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c102,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseCommandPair() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseCommand();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parse_();
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_c1;
        }
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseStore();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c1;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c103,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseCommand() {

      $s0 = $this->peg_parseSourceCommand();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseMap();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseJoin();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseSort();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseHead();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseTail();
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseFilter();
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_parseCount();
                  }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseSourceCommand() {

      $s0 = $this->peg_parseElasticsearch();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseLoad();
      }

      return $s0;
    }

    private function peg_parseSet() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c104) {
        $s1 = $this->peg_c104;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c105); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKey();
          if ($s3 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c106) {
              $s4 = $this->peg_c106;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c107); }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parsePrimitive();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c108,$s3, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseCond() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c109) {
        $s1 = $this->peg_c109;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c110); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseBacktickQuoted();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c111) {
                $s5 = $this->peg_c111;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c112); }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseRoot();
                if ($s6 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c113) {
                    $s7 = $this->peg_c113;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_currPos;
                    $s9 = $this->peg_parse_();
                    if ($s9 !== $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c115) {
                        $s10 = $this->peg_c115;
                        $this->peg_currPos += 4;
                      } else {
                        $s10 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c116); }
                      }
                      if ($s10 !== $this->peg_FAILED) {
                        $s11 = $this->peg_parse_();
                        if ($s11 !== $this->peg_FAILED) {
                          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c111) {
                            $s12 = $this->peg_c111;
                            $this->peg_currPos++;
                          } else {
                            $s12 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c112); }
                          }
                          if ($s12 !== $this->peg_FAILED) {
                            $s13 = $this->peg_parseRoot();
                            if ($s13 !== $this->peg_FAILED) {
                              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c113) {
                                $s14 = $this->peg_c113;
                                $this->peg_currPos++;
                              } else {
                                $s14 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
                              }
                              if ($s14 !== $this->peg_FAILED) {
                                $s9 = array($s9, $s10, $s11, $s12, $s13, $s14);
                                $s8 = $s9;
                              } else {
                                $this->peg_currPos = $s8;
                                $s8 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s8;
                              $s8 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s8;
                            $s8 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s8;
                          $s8 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_c0;
                    }
                    if ($s8 === $this->peg_FAILED) {
                      $s8 = $this->peg_c1;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = call_user_func($this->peg_c117,$s3, $s6, $s8);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseLoop() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c118) {
        $s1 = $this->peg_c118;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c119); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKey();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c111) {
                $s5 = $this->peg_c111;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c112); }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseRoot();
                if ($s6 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c113) {
                    $s7 = $this->peg_c113;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c120,$s3, $s6);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearch() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c121) {
        $s1 = $this->peg_c121;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c122); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKey();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseElasticsearchOpts();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseElasticsearchQuery();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_currPos;
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                      $s9 = $this->peg_c100;
                      $this->peg_currPos++;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                      $s10 = $this->peg_parse_();
                      if ($s10 === $this->peg_FAILED) {
                        $s10 = $this->peg_c1;
                      }
                      if ($s10 !== $this->peg_FAILED) {
                        $s11 = $this->peg_parseElasticsearchAgg();
                        if ($s11 !== $this->peg_FAILED) {
                          $s8 = array($s8, $s9, $s10, $s11);
                          $s7 = $s8;
                        } else {
                          $this->peg_currPos = $s7;
                          $s7 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_c0;
                  }
                  if ($s7 === $this->peg_FAILED) {
                    $s7 = $this->peg_c1;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c123,$s3, $s4, $s6, $s7);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearchOpts() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseElasticsearchOption();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseElasticsearchOption();
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseElasticsearchOption();
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c124,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearchOption() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c125) {
        $s1 = $this->peg_c125;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c126); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseKey();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSEP();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parsePrimVar();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c127,$s2, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearchQuery() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c25) {
        $s1 = $this->peg_c25;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c26); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c128);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseElasticsearchQueryOR();
      }

      return $s0;
    }

    private function peg_parseElasticsearchAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c129) {
        $s1 = $this->peg_c129;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c130); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseAvgAgg();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseCardinalityAgg();
            if ($s3 === $this->peg_FAILED) {
              $s3 = $this->peg_parseExtendedStatsAgg();
              if ($s3 === $this->peg_FAILED) {
                $s3 = $this->peg_parseGeoBoundsAgg();
                if ($s3 === $this->peg_FAILED) {
                  $s3 = $this->peg_parseGeoCentroidAgg();
                  if ($s3 === $this->peg_FAILED) {
                    $s3 = $this->peg_parseAvgAgg();
                    if ($s3 === $this->peg_FAILED) {
                      $s3 = $this->peg_parseMaxAgg();
                      if ($s3 === $this->peg_FAILED) {
                        $s3 = $this->peg_parseMinAgg();
                        if ($s3 === $this->peg_FAILED) {
                          $s3 = $this->peg_parsePercentilesAgg();
                          if ($s3 === $this->peg_FAILED) {
                            $s3 = $this->peg_parsePercentileRanksAgg();
                            if ($s3 === $this->peg_FAILED) {
                              $s3 = $this->peg_parseStatsAgg();
                              if ($s3 === $this->peg_FAILED) {
                                $s3 = $this->peg_parseSumAgg();
                                if ($s3 === $this->peg_FAILED) {
                                  $s3 = $this->peg_parseTopHitsAgg();
                                  if ($s3 === $this->peg_FAILED) {
                                    $s3 = $this->peg_parseValueCountAgg();
                                    if ($s3 === $this->peg_FAILED) {
                                      $s3 = $this->peg_parseDateHistogramAgg();
                                      if ($s3 === $this->peg_FAILED) {
                                        $s3 = $this->peg_parseDateRangeAgg();
                                        if ($s3 === $this->peg_FAILED) {
                                          $s3 = $this->peg_parseGeoDistanceAgg();
                                          if ($s3 === $this->peg_FAILED) {
                                            $s3 = $this->peg_parseGeoHashGridAgg();
                                            if ($s3 === $this->peg_FAILED) {
                                              $s3 = $this->peg_parseHistogramAgg();
                                              if ($s3 === $this->peg_FAILED) {
                                                $s3 = $this->peg_parseIPv4RangeAgg();
                                                if ($s3 === $this->peg_FAILED) {
                                                  $s3 = $this->peg_parseMissingAgg();
                                                  if ($s3 === $this->peg_FAILED) {
                                                    $s3 = $this->peg_parseRangeAgg();
                                                    if ($s3 === $this->peg_FAILED) {
                                                      $s3 = $this->peg_parseSignificantTermsAgg();
                                                      if ($s3 === $this->peg_FAILED) {
                                                        $s3 = $this->peg_parseTermsAgg();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c131,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseAvgAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c132) {
        $s1 = $this->peg_c132;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c133); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c134,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseCardinalityAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 11, "UTF-8") === $this->peg_c135) {
        $s1 = $this->peg_c135;
        $this->peg_currPos += 11;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c136); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c137,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseExtendedStatsAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 14, "UTF-8") === $this->peg_c138) {
        $s1 = $this->peg_c138;
        $this->peg_currPos += 14;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c139); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c140,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseGeoBoundsAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 9, "UTF-8") === $this->peg_c141) {
        $s1 = $this->peg_c141;
        $this->peg_currPos += 9;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c142); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c143,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseGeoCentroidAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 12, "UTF-8") === $this->peg_c144) {
        $s1 = $this->peg_c144;
        $this->peg_currPos += 12;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c145); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c146,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMaxAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c147) {
        $s1 = $this->peg_c147;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c148); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c149,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMinAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c150) {
        $s1 = $this->peg_c150;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c151); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c152,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsePercentilesAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 11, "UTF-8") === $this->peg_c153) {
        $s1 = $this->peg_c153;
        $this->peg_currPos += 11;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c154); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c155,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parsePercentileRanksAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 16, "UTF-8") === $this->peg_c156) {
        $s1 = $this->peg_c156;
        $this->peg_currPos += 16;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c157); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c158,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseStatsAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c159) {
        $s1 = $this->peg_c159;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c160); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c161,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSumAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c162) {
        $s1 = $this->peg_c162;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c163); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c164,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseTopHitsAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 8, "UTF-8") === $this->peg_c165) {
        $s1 = $this->peg_c165;
        $this->peg_currPos += 8;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c166); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c167,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseValueCountAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 11, "UTF-8") === $this->peg_c168) {
        $s1 = $this->peg_c168;
        $this->peg_currPos += 11;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c169); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c170,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseDateHistogramAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 14, "UTF-8") === $this->peg_c171) {
        $s1 = $this->peg_c171;
        $this->peg_currPos += 14;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c172); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c173,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseDateRangeAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 10, "UTF-8") === $this->peg_c174) {
        $s1 = $this->peg_c174;
        $this->peg_currPos += 10;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c175); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c176,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseGeoDistanceAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 12, "UTF-8") === $this->peg_c177) {
        $s1 = $this->peg_c177;
        $this->peg_currPos += 12;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c178); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c179,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseGeoHashGridAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 12, "UTF-8") === $this->peg_c180) {
        $s1 = $this->peg_c180;
        $this->peg_currPos += 12;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c181); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c182,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseHistogramAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 9, "UTF-8") === $this->peg_c183) {
        $s1 = $this->peg_c183;
        $this->peg_currPos += 9;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c184); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c185,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseIPv4RangeAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c186) {
        $s1 = $this->peg_c186;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c187); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c188,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMissingAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 7, "UTF-8") === $this->peg_c189) {
        $s1 = $this->peg_c189;
        $this->peg_currPos += 7;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c190); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c191,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseRangeAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c192) {
        $s1 = $this->peg_c192;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c193); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c194,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSignificantTermsAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 17, "UTF-8") === $this->peg_c195) {
        $s1 = $this->peg_c195;
        $this->peg_currPos += 17;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c196); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c197,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseTermsAgg() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c198) {
        $s1 = $this->peg_c198;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c199); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseAggOptions();
              if ($s6 !== $this->peg_FAILED) {
                $s5 = array($s5, $s6);
                $s4 = $s5;
              } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
            if ($s4 === $this->peg_FAILED) {
              $s4 = $this->peg_c1;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 === $this->peg_FAILED) {
                $s6 = $this->peg_c1;
              }
              if ($s6 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c100) {
                  $s7 = $this->peg_c100;
                  $this->peg_currPos++;
                } else {
                  $s7 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c101); }
                }
                if ($s7 !== $this->peg_FAILED) {
                  $s8 = $this->peg_parse_();
                  if ($s8 === $this->peg_FAILED) {
                    $s8 = $this->peg_c1;
                  }
                  if ($s8 !== $this->peg_FAILED) {
                    $s9 = $this->peg_parseElasticsearchAgg();
                    if ($s9 !== $this->peg_FAILED) {
                      $s6 = array($s6, $s7, $s8, $s9);
                      $s5 = $s6;
                    } else {
                      $this->peg_currPos = $s5;
                      $s5 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = call_user_func($this->peg_c200,$s3, $s4, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMap() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c201) {
        $s1 = $this->peg_c201;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c202); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseMapClause();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_c2;
            $s5 = $this->peg_currPos;
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseMapClause();
              if ($s7 !== $this->peg_FAILED) {
                $s6 = array($s6, $s7);
                $s5 = $s6;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s5;
              $s5 = $this->peg_c0;
            }
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseMapClause();
                if ($s7 !== $this->peg_FAILED) {
                  $s6 = array($s6, $s7);
                  $s5 = $s6;
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c203,$s3, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMapClause() {

      $s0 = $this->peg_parseMapCombine();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseMapDelete();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseMapExpr();
        }
      }

      return $s0;
    }

    private function peg_parseMapCombine() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseKeyVar();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c204) {
          $s4 = $this->peg_c204;
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c205); }
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseKeyVar();
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c204) {
            $s4 = $this->peg_c204;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c205); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseKeyVar();
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c106) {
            $s3 = $this->peg_c106;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c107); }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseKeyVar();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c206,$s1, $s2, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMapDelete() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c207) {
        $s1 = $this->peg_c207;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c208); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseKeyVar();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c209,$s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseMapExpr() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseKeyVar();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c106) {
          $s2 = $this->peg_c106;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c107); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExprVar();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c210,$s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSort() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c211) {
        $s1 = $this->peg_c211;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c212); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSortExpr();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseSortFields();
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c213,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSortExpr() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExprVar();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c214,$s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseSortFields() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSortClause();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseSortClause();
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseSortClause();
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c215,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSortClause() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseKeyVar();
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c96) {
          $s2 = $this->peg_c96;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c97); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSortType();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c216,$s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseSortType() {

      $s0 = $this->peg_parseSortAsc();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseSortDesc();
      }

      return $s0;
    }

    private function peg_parseSortAsc() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c217) {
        $s1 = $this->peg_c217;
        $this->peg_currPos += 3;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c218); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c219);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseSortDesc() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c220) {
        $s1 = $this->peg_c220;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c221); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c222);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseFilter() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 6, "UTF-8") === $this->peg_c223) {
        $s1 = $this->peg_c223;
        $this->peg_currPos += 6;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c224); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExprVar();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c225,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseJoin() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c226) {
        $s1 = $this->peg_c226;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c227); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseJoinType();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseKey();
              if ($s5 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c106) {
                  $s6 = $this->peg_c106;
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c107); }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseKeyVar();
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_c2;
                    $s9 = $this->peg_currPos;
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c204) {
                      $s10 = $this->peg_c204;
                      $this->peg_currPos++;
                    } else {
                      $s10 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c205); }
                    }
                    if ($s10 !== $this->peg_FAILED) {
                      $s11 = $this->peg_parseKeyVar();
                      if ($s11 !== $this->peg_FAILED) {
                        $s10 = array($s10, $s11);
                        $s9 = $s10;
                      } else {
                        $this->peg_currPos = $s9;
                        $s9 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s9;
                      $s9 = $this->peg_c0;
                    }
                    while ($s9 !== $this->peg_FAILED) {
                      $s8[] = $s9;
                      $s9 = $this->peg_currPos;
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c204) {
                        $s10 = $this->peg_c204;
                        $this->peg_currPos++;
                      } else {
                        $s10 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c205); }
                      }
                      if ($s10 !== $this->peg_FAILED) {
                        $s11 = $this->peg_parseKeyVar();
                        if ($s11 !== $this->peg_FAILED) {
                          $s10 = array($s10, $s11);
                          $s9 = $s10;
                        } else {
                          $this->peg_currPos = $s9;
                          $s9 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s9;
                        $s9 = $this->peg_c0;
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = call_user_func($this->peg_c228,$s3, $s5, $s7, $s8);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseJoinType() {

      $s0 = $this->peg_parseJoinInner();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseJoinLeft();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseJoinRight();
        }
      }

      return $s0;
    }

    private function peg_parseJoinInner() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c229) {
        $s1 = $this->peg_c229;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c230); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c231);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseJoinLeft() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c232) {
        $s1 = $this->peg_c232;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c233); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c234);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseJoinRight() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c235) {
        $s1 = $this->peg_c235;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c236); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c237);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseLoad() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c238) {
        $s1 = $this->peg_c238;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c239); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKey();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_c2;
            $s5 = $this->peg_currPos;
            if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c96) {
              $s6 = $this->peg_c96;
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c97); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseKey();
              if ($s7 !== $this->peg_FAILED) {
                $s6 = array($s6, $s7);
                $s5 = $s6;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s5;
              $s5 = $this->peg_c0;
            }
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_currPos;
              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c96) {
                $s6 = $this->peg_c96;
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c97); }
              }
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseKey();
                if ($s7 !== $this->peg_FAILED) {
                  $s6 = array($s6, $s7);
                  $s5 = $s6;
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_c0;
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c240,$s3, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseHead() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c241) {
        $s1 = $this->peg_c241;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c242); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIntVar();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c243,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseTail() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 4, "UTF-8") === $this->peg_c244) {
        $s1 = $this->peg_c244;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c245); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIntVar();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c246,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseCount() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 5, "UTF-8") === $this->peg_c247) {
        $s1 = $this->peg_c247;
        $this->peg_currPos += 5;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c248); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c249);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseStore() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c250) {
        $s1 = $this->peg_c250;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c251); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c1;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKey();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c252,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearchQueryOR() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseElasticsearchQueryAND();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c253) {
            $s5 = $this->peg_c253;
            $this->peg_currPos += 2;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c254); }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parse_();
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_parseElasticsearchQueryAND();
              if ($s7 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6, $s7);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c253) {
              $s5 = $this->peg_c253;
              $this->peg_currPos += 2;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c254); }
            }
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parse_();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseElasticsearchQueryAND();
                if ($s7 !== $this->peg_FAILED) {
                  $s4 = array($s4, $s5, $s6, $s7);
                  $s3 = $s4;
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c255,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearchQueryAND() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseElasticsearchQueryNOT();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_currPos;
        $s5 = $this->peg_parse_();
        if ($s5 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c256) {
            $s6 = $this->peg_c256;
            $this->peg_currPos += 3;
          } else {
            $s6 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c257); }
          }
          if ($s6 !== $this->peg_FAILED) {
            $s5 = array($s5, $s6);
            $s4 = $s5;
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_c0;
        }
        if ($s4 === $this->peg_FAILED) {
          $s4 = $this->peg_c1;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parse_();
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_parseElasticsearchQueryNOT();
            if ($s6 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5, $s6);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_currPos;
          $s5 = $this->peg_parse_();
          if ($s5 !== $this->peg_FAILED) {
            if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c256) {
              $s6 = $this->peg_c256;
              $this->peg_currPos += 3;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c257); }
            }
            if ($s6 !== $this->peg_FAILED) {
              $s5 = array($s5, $s6);
              $s4 = $s5;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_c0;
          }
          if ($s4 === $this->peg_FAILED) {
            $s4 = $this->peg_c1;
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseElasticsearchQueryNOT();
              if ($s6 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5, $s6);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c258,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearchQueryNOT() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseElasticsearchQueryUnaryNOT();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = $this->peg_parse_();
        if ($s3 !== $this->peg_FAILED) {
          if (mb_substr($this->input, $this->peg_currPos, 3, "UTF-8") === $this->peg_c259) {
            $s4 = $this->peg_c259;
            $this->peg_currPos += 3;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c260); }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parse_();
            if ($s5 !== $this->peg_FAILED) {
              $s6 = $this->peg_parseElasticsearchQueryUnaryNOT();
              if ($s6 !== $this->peg_FAILED) {
                $s3 = array($s3, $s4, $s5, $s6);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_c0;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_c1;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c261,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseElasticsearchQueryUnaryNOT() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c207) {
        $s1 = $this->peg_c207;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c208); }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_c1;
      }
      if ($s1 !== $this->peg_FAILED) {
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c262) {
          $s2 = $this->peg_c262;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c263); }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_c1;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseElasticsearchQuery();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_c1;
              }
              if ($s5 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c264) {
                  $s6 = $this->peg_c264;
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c265); }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = call_user_func($this->peg_c266,$s1, $s4);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c207) {
          $s1 = $this->peg_c207;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c208); }
        }
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_c1;
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseElasticsearchQueryClause();
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c267,$s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      }

      return $s0;
    }

    private function peg_parseElasticsearchQueryClause() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 8, "UTF-8") === $this->peg_c268) {
        $s1 = $this->peg_c268;
        $this->peg_currPos += 8;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c269); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseKeyVar();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c270,$s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 9, "UTF-8") === $this->peg_c271) {
          $s1 = $this->peg_c271;
          $this->peg_currPos += 9;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c272); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseSEP();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseKeyVar();
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = call_user_func($this->peg_c273,$s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_parseKeyVar();
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parseSEP();
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parseElasticsearchQueryRangeLow();
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_();
                if ($s4 === $this->peg_FAILED) {
                  $s4 = $this->peg_c1;
                }
                if ($s4 !== $this->peg_FAILED) {
                  $s5 = $this->peg_parsePrimVar();
                  if ($s5 !== $this->peg_FAILED) {
                    $s6 = $this->peg_parse_();
                    if ($s6 !== $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 2, "UTF-8") === $this->peg_c274) {
                        $s7 = $this->peg_c274;
                        $this->peg_currPos += 2;
                      } else {
                        $s7 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c275); }
                      }
                      if ($s7 !== $this->peg_FAILED) {
                        $s8 = $this->peg_parse_();
                        if ($s8 !== $this->peg_FAILED) {
                          $s9 = $this->peg_parsePrimVar();
                          if ($s9 !== $this->peg_FAILED) {
                            $s10 = $this->peg_parse_();
                            if ($s10 === $this->peg_FAILED) {
                              $s10 = $this->peg_c1;
                            }
                            if ($s10 !== $this->peg_FAILED) {
                              $s11 = $this->peg_parseElasticsearchQueryRangeHigh();
                              if ($s11 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s1 = call_user_func($this->peg_c276,$s1, $s3, $s5, $s9, $s11);
                                $s0 = $s1;
                              } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            $s1 = $this->peg_parseKey();
            if ($s1 !== $this->peg_FAILED) {
              $s2 = $this->peg_parseSEP();
              if ($s2 !== $this->peg_FAILED) {
                if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c277) {
                  $s3 = $this->peg_c277;
                  $this->peg_currPos++;
                } else {
                  $s3 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c278); }
                }
                if ($s3 !== $this->peg_FAILED) {
                  $s4 = $this->peg_parseValVar();
                  if ($s4 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = call_user_func($this->peg_c279,$s1, $s4);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_c0;
            }
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              $s1 = $this->peg_parseKey();
              if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_parseSEP();
                if ($s2 !== $this->peg_FAILED) {
                  if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c280) {
                    $s3 = $this->peg_c280;
                    $this->peg_currPos++;
                  } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c281); }
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parseRegexVal();
                    if ($s4 !== $this->peg_FAILED) {
                      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c280) {
                        $s5 = $this->peg_c280;
                        $this->peg_currPos++;
                      } else {
                        $s5 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c281); }
                      }
                      if ($s5 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = call_user_func($this->peg_c282,$s1, $s4);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_c0;
              }
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = $this->peg_parseKey();
                if ($s1 !== $this->peg_FAILED) {
                  $s2 = $this->peg_parseSEP();
                  if ($s2 !== $this->peg_FAILED) {
                    if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c262) {
                      $s3 = $this->peg_c262;
                      $this->peg_currPos++;
                    } else {
                      $s3 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c263); }
                    }
                    if ($s3 !== $this->peg_FAILED) {
                      $s4 = $this->peg_parse_();
                      if ($s4 === $this->peg_FAILED) {
                        $s4 = $this->peg_c1;
                      }
                      if ($s4 !== $this->peg_FAILED) {
                        $s5 = $this->peg_parseEscaped();
                        if ($s5 !== $this->peg_FAILED) {
                          $s6 = $this->peg_c2;
                          $s7 = $this->peg_currPos;
                          $s8 = $this->peg_parse_();
                          if ($s8 !== $this->peg_FAILED) {
                            $s9 = $this->peg_parseEscaped();
                            if ($s9 !== $this->peg_FAILED) {
                              $s8 = array($s8, $s9);
                              $s7 = $s8;
                            } else {
                              $this->peg_currPos = $s7;
                              $s7 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s7;
                            $s7 = $this->peg_c0;
                          }
                          while ($s7 !== $this->peg_FAILED) {
                            $s6[] = $s7;
                            $s7 = $this->peg_currPos;
                            $s8 = $this->peg_parse_();
                            if ($s8 !== $this->peg_FAILED) {
                              $s9 = $this->peg_parseEscaped();
                              if ($s9 !== $this->peg_FAILED) {
                                $s8 = array($s8, $s9);
                                $s7 = $s8;
                              } else {
                                $this->peg_currPos = $s7;
                                $s7 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s7;
                              $s7 = $this->peg_c0;
                            }
                          }
                          if ($s6 !== $this->peg_FAILED) {
                            $s7 = $this->peg_parse_();
                            if ($s7 === $this->peg_FAILED) {
                              $s7 = $this->peg_c1;
                            }
                            if ($s7 !== $this->peg_FAILED) {
                              if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c264) {
                                $s8 = $this->peg_c264;
                                $this->peg_currPos++;
                              } else {
                                $s8 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c265); }
                              }
                              if ($s8 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s1 = call_user_func($this->peg_c283,$s1, $s5, $s6);
                                $s0 = $s1;
                              } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_c0;
                              }
                            } else {
                              $this->peg_currPos = $s0;
                              $s0 = $this->peg_c0;
                            }
                          } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_c0;
                          }
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_c0;
                }
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_currPos;
                  $s1 = $this->peg_parseKey();
                  if ($s1 !== $this->peg_FAILED) {
                    $s2 = $this->peg_parseSEP();
                    if ($s2 !== $this->peg_FAILED) {
                      $s3 = $this->peg_parsePathVar();
                      if ($s3 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s0;
                        $s1 = call_user_func($this->peg_c284,$s1, $s3);
                        $s0 = $s1;
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_c0;
                  }
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_currPos;
                    $s1 = $this->peg_parseKey();
                    if ($s1 !== $this->peg_FAILED) {
                      $s2 = $this->peg_parseSEP();
                      if ($s2 !== $this->peg_FAILED) {
                        $s3 = $this->peg_parseWCValVar();
                        if ($s3 !== $this->peg_FAILED) {
                          $this->peg_reportedPos = $s0;
                          $s1 = call_user_func($this->peg_c285,$s1, $s3);
                          $s0 = $s1;
                        } else {
                          $this->peg_currPos = $s0;
                          $s0 = $this->peg_c0;
                        }
                      } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_c0;
                      }
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_c0;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseElasticsearchQueryRangeLow() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c94) {
        $s1 = $this->peg_c94;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c95); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c286);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c111) {
          $s1 = $this->peg_c111;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c112); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c287);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseElasticsearchQueryRangeHigh() {

      $s0 = $this->peg_currPos;
      if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c98) {
        $s1 = $this->peg_c98;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c99); }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = call_user_func($this->peg_c288);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if (mb_substr($this->input, $this->peg_currPos, 1, "UTF-8") === $this->peg_c113) {
          $s1 = $this->peg_c113;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) { $this->peg_fail($this->peg_c114); }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c289);
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseAggOptions() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseAggOption();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_c2;
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseAggOption();
          if ($s5 !== $this->peg_FAILED) {
            $s4 = array($s4, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_c0;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parse_();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseAggOption();
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_c0;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_c0;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = call_user_func($this->peg_c124,$s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

    private function peg_parseAggOption() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseKey();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parsePrimVar();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = call_user_func($this->peg_c127,$s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_c0;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_c0;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_c0;
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();
    $this->input = $input;
    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = $this->peg_FAILED;
    $this->peg_c1 = null;
    $this->peg_c2 = array();
    $this->peg_c3 = ";";
    $this->peg_c4 = array( "type" => "literal", "value" => ";", "description" => "\";\"" );
    $this->peg_c5 = function($first,$rest) { return Util::combine($first, $rest, 3); };
    $this->peg_c6 = ":";
    $this->peg_c7 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c8 = array("type" => "other", "description" => "WhitespaceOrComment" );
    $this->peg_c9 = "#";
    $this->peg_c10 = array( "type" => "literal", "value" => "#", "description" => "\"#\"" );
    $this->peg_c11 = "/^[^\\r\\n]/";
    $this->peg_c12 = array( "type" => "class", "value" => "[^\\r\\n]", "description" => "[^\\r\\n]" );
    $this->peg_c13 = "/^[ \\t\\n\\r]/";
    $this->peg_c14 = array( "type" => "class", "value" => "[ \\t\\n\\r]", "description" => "[ \\t\\n\\r]" );
    $this->peg_c15 = "`";
    $this->peg_c16 = array( "type" => "literal", "value" => "`", "description" => "\"`\"" );
    $this->peg_c17 = function($str) { return $str; };
    $this->peg_c18 = "\\`";
    $this->peg_c19 = array( "type" => "literal", "value" => "\\`", "description" => "\"\\\\`\"" );
    $this->peg_c20 = function() { return '`'; };
    $this->peg_c21 = "/^[^`]/";
    $this->peg_c22 = array( "type" => "class", "value" => "[^`]", "description" => "[^`]" );
    $this->peg_c23 = function($chr) { return $chr; };
    $this->peg_c24 = function($chunks) { return Command\Elasticsearch::escapeQuery($chunks); };
    $this->peg_c25 = "*";
    $this->peg_c26 = array( "type" => "literal", "value" => "*", "description" => "\"*\"" );
    $this->peg_c27 = function() { return Command\Elasticsearch\Token::W_STAR; };
    $this->peg_c28 = "?";
    $this->peg_c29 = array( "type" => "literal", "value" => "?", "description" => "\"?\"" );
    $this->peg_c30 = function() { return Command\Elasticsearch\Token::W_QMARK; };
    $this->peg_c31 = "\"";
    $this->peg_c32 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c33 = "'";
    $this->peg_c34 = array( "type" => "literal", "value" => "'", "description" => "\"'\"" );
    $this->peg_c35 = "\\\"";
    $this->peg_c36 = array( "type" => "literal", "value" => "\\\"", "description" => "\"\\\\\\\"\"" );
    $this->peg_c37 = function() { return '"'; };
    $this->peg_c38 = "/^[^\"]/";
    $this->peg_c39 = array( "type" => "class", "value" => "[^\"]", "description" => "[^\"]" );
    $this->peg_c40 = "\\'";
    $this->peg_c41 = array( "type" => "literal", "value" => "\\'", "description" => "\"\\\\'\"" );
    $this->peg_c42 = function() { return "'"; };
    $this->peg_c43 = "/^[^']/";
    $this->peg_c44 = array( "type" => "class", "value" => "[^']", "description" => "[^']" );
    $this->peg_c45 = "\\ ";
    $this->peg_c46 = array( "type" => "literal", "value" => "\\ ", "description" => "\"\\\\ \"" );
    $this->peg_c47 = function() { return ' '; };
    $this->peg_c48 = "\\(";
    $this->peg_c49 = array( "type" => "literal", "value" => "\\(", "description" => "\"\\\\(\"" );
    $this->peg_c50 = function() { return '('; };
    $this->peg_c51 = "\\)";
    $this->peg_c52 = array( "type" => "literal", "value" => "\\)", "description" => "\"\\\\)\"" );
    $this->peg_c53 = function() { return ')'; };
    $this->peg_c54 = "/^[^;'\" *?\\(\\)]/";
    $this->peg_c55 = array( "type" => "class", "value" => "[^;'\" *?()]", "description" => "[^;'\" *?()]" );
    $this->peg_c56 = "\\n";
    $this->peg_c57 = array( "type" => "literal", "value" => "\\n", "description" => "\"\\\\n\"" );
    $this->peg_c58 = function() { return "\n"; };
    $this->peg_c59 = "\\r";
    $this->peg_c60 = array( "type" => "literal", "value" => "\\r", "description" => "\"\\\\r\"" );
    $this->peg_c61 = function() { return "\r"; };
    $this->peg_c62 = "\\t";
    $this->peg_c63 = array( "type" => "literal", "value" => "\\t", "description" => "\"\\\\t\"" );
    $this->peg_c64 = function() { return "\t"; };
    $this->peg_c65 = "\\/";
    $this->peg_c66 = array( "type" => "literal", "value" => "\\/", "description" => "\"\\\\/\"" );
    $this->peg_c67 = function() { return '/'; };
    $this->peg_c68 = "/^[^\\/]/";
    $this->peg_c69 = array( "type" => "class", "value" => "[^\\/]", "description" => "[^\\/]" );
    $this->peg_c70 = "/^[a-zA-Z0-9._-]/";
    $this->peg_c71 = array( "type" => "class", "value" => "[a-zA-Z0-9._\\-]", "description" => "[a-zA-Z0-9._\\-]" );
    $this->peg_c72 = "$";
    $this->peg_c73 = array( "type" => "literal", "value" => "$", "description" => "\"$\"" );
    $this->peg_c74 = "/^[a-zA-Z0-9_]/";
    $this->peg_c75 = array( "type" => "class", "value" => "[a-zA-Z0-9_]", "description" => "[a-zA-Z0-9_]" );
    $this->peg_c76 = function($var) { return new Symbol($var); };
    $this->peg_c77 = function($var,$list) { return new Symbol($var, Symbol::T_LIST, $list); };
    $this->peg_c78 = ".";
    $this->peg_c79 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c80 = function($list) { return Util::pluck($list, 1); };
    $this->peg_c81 = function() { return []; };
    $this->peg_c82 = "/^[a-zA-Z0-9_.-]/";
    $this->peg_c83 = array( "type" => "class", "value" => "[a-zA-Z0-9_.\\-]", "description" => "[a-zA-Z0-9_.\\-]" );
    $this->peg_c84 = "true";
    $this->peg_c85 = array( "type" => "literal", "value" => "true", "description" => "\"true\"" );
    $this->peg_c86 = function() { return true; };
    $this->peg_c87 = "false";
    $this->peg_c88 = array( "type" => "literal", "value" => "false", "description" => "\"false\"" );
    $this->peg_c89 = function() { return false; };
    $this->peg_c90 = "/^[0-9]/";
    $this->peg_c91 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c92 = function($num) { return floatval($num); };
    $this->peg_c93 = function($num) { return intval($num); };
    $this->peg_c94 = "[";
    $this->peg_c95 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c96 = ",";
    $this->peg_c97 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c98 = "]";
    $this->peg_c99 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c100 = "|";
    $this->peg_c101 = array( "type" => "literal", "value" => "|", "description" => "\"|\"" );
    $this->peg_c102 = function($first,$rest) { return new Statement\CommandList(Util::merge($first, $rest, 3)); };
    $this->peg_c103 = function($first,$rest) { $arr = [$first]; if(count($rest) > 0) $arr[] = $rest[1]; return $arr; };
    $this->peg_c104 = "set";
    $this->peg_c105 = array( "type" => "literal", "value" => "set", "description" => "\"set\"" );
    $this->peg_c106 = "=";
    $this->peg_c107 = array( "type" => "literal", "value" => "=", "description" => "\"=\"" );
    $this->peg_c108 = function($target,$val) { return new Statement\Set($target, $val); };
    $this->peg_c109 = "if";
    $this->peg_c110 = array( "type" => "literal", "value" => "if", "description" => "\"if\"" );
    $this->peg_c111 = "{";
    $this->peg_c112 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c113 = "}";
    $this->peg_c114 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c115 = "else";
    $this->peg_c116 = array( "type" => "literal", "value" => "else", "description" => "\"else\"" );
    $this->peg_c117 = function($expr,$a,$b) { return new Statement\Cond($expr, $a, $b ? $b[4]:null); };
    $this->peg_c118 = "for";
    $this->peg_c119 = array( "type" => "literal", "value" => "for", "description" => "\"for\"" );
    $this->peg_c120 = function($source,$root) { return new Statement\Loop($source, $root); };
    $this->peg_c121 = "es";
    $this->peg_c122 = array( "type" => "literal", "value" => "es", "description" => "\"es\"" );
    $this->peg_c123 = function($source,$opts,$query,$agg) { return $this->es_builder->build($source, $query, count($agg) > 0 ? $agg[3]:null, $opts ? $opts[1]:[]); };
    $this->peg_c124 = function($first,$rest) { return Util::assoc($first, $rest, 1); };
    $this->peg_c125 = "!";
    $this->peg_c126 = array( "type" => "literal", "value" => "!", "description" => "\"!\"" );
    $this->peg_c127 = function($field,$val) { return [$field, $val]; };
    $this->peg_c128 = function() { return ['match_all' => []]; };
    $this->peg_c129 = "agg";
    $this->peg_c130 = array( "type" => "literal", "value" => "agg", "description" => "\"agg\"" );
    $this->peg_c131 = function($agg) { return $agg; };
    $this->peg_c132 = "avg";
    $this->peg_c133 = array( "type" => "literal", "value" => "avg", "description" => "\"avg\"" );
    $this->peg_c134 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\Avg($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c135 = "cardinality";
    $this->peg_c136 = array( "type" => "literal", "value" => "cardinality", "description" => "\"cardinality\"" );
    $this->peg_c137 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\Cardinality($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c138 = "extended_stats";
    $this->peg_c139 = array( "type" => "literal", "value" => "extended_stats", "description" => "\"extended_stats\"" );
    $this->peg_c140 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\ExtendedStats($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c141 = "geo_bound";
    $this->peg_c142 = array( "type" => "literal", "value" => "geo_bound", "description" => "\"geo_bound\"" );
    $this->peg_c143 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\GeoBound($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c144 = "geo_centroid";
    $this->peg_c145 = array( "type" => "literal", "value" => "geo_centroid", "description" => "\"geo_centroid\"" );
    $this->peg_c146 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\GeoCentroid($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c147 = "max";
    $this->peg_c148 = array( "type" => "literal", "value" => "max", "description" => "\"max\"" );
    $this->peg_c149 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\Max($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c150 = "min";
    $this->peg_c151 = array( "type" => "literal", "value" => "min", "description" => "\"min\"" );
    $this->peg_c152 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\Min($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c153 = "percentiles";
    $this->peg_c154 = array( "type" => "literal", "value" => "percentiles", "description" => "\"percentiles\"" );
    $this->peg_c155 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\Percentiles($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c156 = "percentile_ranks";
    $this->peg_c157 = array( "type" => "literal", "value" => "percentile_ranks", "description" => "\"percentile_ranks\"" );
    $this->peg_c158 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\PercentileRanks($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c159 = "stats";
    $this->peg_c160 = array( "type" => "literal", "value" => "stats", "description" => "\"stats\"" );
    $this->peg_c161 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\Stats($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c162 = "sum";
    $this->peg_c163 = array( "type" => "literal", "value" => "sum", "description" => "\"sum\"" );
    $this->peg_c164 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\Sum($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c165 = "top_hits";
    $this->peg_c166 = array( "type" => "literal", "value" => "top_hits", "description" => "\"top_hits\"" );
    $this->peg_c167 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\TopHits($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c168 = "value_count";
    $this->peg_c169 = array( "type" => "literal", "value" => "value_count", "description" => "\"value_count\"" );
    $this->peg_c170 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Metrics\ValueCount($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c171 = "date_histogram";
    $this->peg_c172 = array( "type" => "literal", "value" => "date_histogram", "description" => "\"date_histogram\"" );
    $this->peg_c173 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\DateHistogram($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c174 = "date_range";
    $this->peg_c175 = array( "type" => "literal", "value" => "date_range", "description" => "\"date_range\"" );
    $this->peg_c176 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\DateRange($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c177 = "geo_distance";
    $this->peg_c178 = array( "type" => "literal", "value" => "geo_distance", "description" => "\"geo_distance\"" );
    $this->peg_c179 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\GeoDistance($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c180 = "geohash_grid";
    $this->peg_c181 = array( "type" => "literal", "value" => "geohash_grid", "description" => "\"geohash_grid\"" );
    $this->peg_c182 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\GeoHashGrid($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c183 = "histogram";
    $this->peg_c184 = array( "type" => "literal", "value" => "histogram", "description" => "\"histogram\"" );
    $this->peg_c185 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\Histogram($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c186 = "ipv4";
    $this->peg_c187 = array( "type" => "literal", "value" => "ipv4", "description" => "\"ipv4\"" );
    $this->peg_c188 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\IPv4($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c189 = "missing";
    $this->peg_c190 = array( "type" => "literal", "value" => "missing", "description" => "\"missing\"" );
    $this->peg_c191 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\Missing($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c192 = "range";
    $this->peg_c193 = array( "type" => "literal", "value" => "range", "description" => "\"range\"" );
    $this->peg_c194 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\Range($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c195 = "significant_terms";
    $this->peg_c196 = array( "type" => "literal", "value" => "significant_terms", "description" => "\"significant_terms\"" );
    $this->peg_c197 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\SignificantTerms($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c198 = "terms";
    $this->peg_c199 = array( "type" => "literal", "value" => "terms", "description" => "\"terms\"" );
    $this->peg_c200 = function($key,$options,$subagg) { return new Command\Elasticsearch\Agg\Bucket\Terms($key, $options ? $options[1]:[], $subagg ? $subagg[3]:null); };
    $this->peg_c201 = "map";
    $this->peg_c202 = array( "type" => "literal", "value" => "map", "description" => "\"map\"" );
    $this->peg_c203 = function($first,$rest) { return new Command\Map(Util::combine($first, $rest, 1)); };
    $this->peg_c204 = "+";
    $this->peg_c205 = array( "type" => "literal", "value" => "+", "description" => "\"+\"" );
    $this->peg_c206 = function($first,$rest,$target) { return [Command\Map::T_COMBINE, Util::combine($first, $rest, 1), $target]; };
    $this->peg_c207 = "-";
    $this->peg_c208 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c209 = function($target) { return [Command\Map::T_DELETE, $target]; };
    $this->peg_c210 = function($target,$expr) { return [Command\Map::T_EXPR, $target, $expr]; };
    $this->peg_c211 = "sort";
    $this->peg_c212 = array( "type" => "literal", "value" => "sort", "description" => "\"sort\"" );
    $this->peg_c213 = function($sort) { return $sort; };
    $this->peg_c214 = function($expr) { return new Command\Sort\Expr($expr); };
    $this->peg_c215 = function($first,$rest) { return new Command\Sort\Fields(Util::combine($first, $rest, 1)); };
    $this->peg_c216 = function($key,$type) { return [$key, $type]; };
    $this->peg_c217 = "asc";
    $this->peg_c218 = array( "type" => "literal", "value" => "asc", "description" => "\"asc\"" );
    $this->peg_c219 = function() { return Command\Sort\Fields::T_ASC; };
    $this->peg_c220 = "desc";
    $this->peg_c221 = array( "type" => "literal", "value" => "desc", "description" => "\"desc\"" );
    $this->peg_c222 = function() { return Command\Sort\Fields::T_DESC; };
    $this->peg_c223 = "filter";
    $this->peg_c224 = array( "type" => "literal", "value" => "filter", "description" => "\"filter\"" );
    $this->peg_c225 = function($expr) { return new Command\Filter($expr); };
    $this->peg_c226 = "join";
    $this->peg_c227 = array( "type" => "literal", "value" => "join", "description" => "\"join\"" );
    $this->peg_c228 = function($type,$source,$first,$rest) { return new Command\Join($source, Util::combine($first, $rest, 1), $type); };
    $this->peg_c229 = "inner";
    $this->peg_c230 = array( "type" => "literal", "value" => "inner", "description" => "\"inner\"" );
    $this->peg_c231 = function() { return Command\Join::T_INNER; };
    $this->peg_c232 = "left";
    $this->peg_c233 = array( "type" => "literal", "value" => "left", "description" => "\"left\"" );
    $this->peg_c234 = function() { return Command\Join::T_LEFT; };
    $this->peg_c235 = "right";
    $this->peg_c236 = array( "type" => "literal", "value" => "right", "description" => "\"right\"" );
    $this->peg_c237 = function() { return Command\Join::T_RIGHT; };
    $this->peg_c238 = "load";
    $this->peg_c239 = array( "type" => "literal", "value" => "load", "description" => "\"load\"" );
    $this->peg_c240 = function($first,$rest) { return new Command\Load(Util::combine($first, $rest, 1)); };
    $this->peg_c241 = "head";
    $this->peg_c242 = array( "type" => "literal", "value" => "head", "description" => "\"head\"" );
    $this->peg_c243 = function($n) { return new Command\Head($n); };
    $this->peg_c244 = "tail";
    $this->peg_c245 = array( "type" => "literal", "value" => "tail", "description" => "\"tail\"" );
    $this->peg_c246 = function($n) { return new Command\Tail($n); };
    $this->peg_c247 = "count";
    $this->peg_c248 = array( "type" => "literal", "value" => "count", "description" => "\"count\"" );
    $this->peg_c249 = function() { return new Command\Count; };
    $this->peg_c250 = ">";
    $this->peg_c251 = array( "type" => "literal", "value" => ">", "description" => "\">\"" );
    $this->peg_c252 = function($target) { return new Command\Store($target); };
    $this->peg_c253 = "OR";
    $this->peg_c254 = array( "type" => "literal", "value" => "OR", "description" => "\"OR\"" );
    $this->peg_c255 = function($a,$b) { return (isset($b) && count($b)) ? ['or' => Util::combine($a, $b, 3)]:$a; };
    $this->peg_c256 = "AND";
    $this->peg_c257 = array( "type" => "literal", "value" => "AND", "description" => "\"AND\"" );
    $this->peg_c258 = function($a,$b) { return (isset($b) && count($b)) ? ['and' => Util::combine($a, $b, 2)]:$a; };
    $this->peg_c259 = "NOT";
    $this->peg_c260 = array( "type" => "literal", "value" => "NOT", "description" => "\"NOT\"" );
    $this->peg_c261 = function($a,$b) { return (isset($b) && count($b)) ? ['and' => [$a, ['not' => ['filter' => $b[3]]]]]:$a; };
    $this->peg_c262 = "(";
    $this->peg_c263 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c264 = ")";
    $this->peg_c265 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c266 = function($neg,$expr) { return $neg ? ['not' => ['filter' => $expr]]:$expr; };
    $this->peg_c267 = function($neg,$clause) { return $neg ? ['not' => ['filter' => $clause]]:$clause; };
    $this->peg_c268 = "_exists_";
    $this->peg_c269 = array( "type" => "literal", "value" => "_exists_", "description" => "\"_exists_\"" );
    $this->peg_c270 = function($field) { return ['exists' => ['field' => $field]]; };
    $this->peg_c271 = "_missing_";
    $this->peg_c272 = array( "type" => "literal", "value" => "_missing_", "description" => "\"_missing_\"" );
    $this->peg_c273 = function($field) { return ['missing' => ['field' => $field]]; };
    $this->peg_c274 = "TO";
    $this->peg_c275 = array( "type" => "literal", "value" => "TO", "description" => "\"TO\"" );
    $this->peg_c276 = function($field,$ltype,$lo,$hi,$htype) {
        $ret = [];
        if($lo !== '*') { $ret[$ltype] = $lo; }
        if($hi !== '*') { $ret[$htype] = $hi; }
        return ['range' => [$field => $ret]];
      };
    $this->peg_c277 = "^";
    $this->peg_c278 = array( "type" => "literal", "value" => "^", "description" => "\"^\"" );
    $this->peg_c279 = function($field,$val) { return ['prefix' => [$field => $val]]; };
    $this->peg_c280 = "/";
    $this->peg_c281 = array( "type" => "literal", "value" => "/", "description" => "\"/\"" );
    $this->peg_c282 = function($field,$regex) { return ['regexp' => [$field => $regex]]; };
    $this->peg_c283 = function($field,$first,$rest) { return ['terms' => [$field => Util::combine($first, $rest, 1)]]; };
    $this->peg_c284 = function($field,$val) { return ['terms' => [$field => $val]]; };
    $this->peg_c285 = function($field,$val) { return ['query' => ['query_string' => ['default_field' => $field, 'query' => $val]]]; };
    $this->peg_c286 = function() { return 'lte'; };
    $this->peg_c287 = function() { return 'lt'; };
    $this->peg_c288 = function() { return 'gte'; };
    $this->peg_c289 = function() { return 'gt'; };

    $peg_startRuleFunctions = array( 'Root' => array($this, "peg_parseRoot") );
    $peg_startRuleFunction  = array($this, "peg_parseRoot");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);
    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === mb_strlen($input, "UTF-8")) {
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < mb_strlen($input, "UTF-8")) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      throw $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
    }
  }

};
